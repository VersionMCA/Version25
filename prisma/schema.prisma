datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id                String          @id @default(cuid())
  name              String?
  email             String          @unique
  emailVerified     DateTime?
  image             String?

  collegeName       String?
  collegeRollNumber String?
  phoneNumber       String?

  accounts          Account[] // can it be null?
  sessions          Session[]
  registrations     Registration[]
  teams             Team[]

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
enum EventType {
  INDIVIDUAL
  TEAM
}

model Event {
  id            Int     @id @default(autoincrement()) 
  name          String  @unique
  description   String?
  date          DateTime?
  startTime     DateTime?
  endTime       DateTime?
  venue         String?
  type          EventType
  minTeamSize   Int
  maxTeamSize   Int
  image         String

  eventDetails  EventDetail[]
  teams        Team[]  
  registrations Registration[]
}

model EventDetail {
  id       String   @id @default(cuid())
  title    String
  content  String
  eventId  Int
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade,onUpdate: Cascade)
}


model Registration {
  id                String          @id @default(cuid())
  userId            String
  eventId           Int
  teamId            String?         // Nullable for individual events
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  event             Event           @relation(fields: [eventId], references: [id], onDelete: Cascade,onUpdate: Cascade)
  team              Team?           @relation(fields: [teamId], references: [id], onDelete: Cascade,onUpdate: Cascade) 

  createdAt         DateTime        @default(now())
  @@unique([userId, eventId])       // Ensures unique registration for the same user in an event
}


model Team {
  id                String          @id @default(cuid())
  teamName          String
  leaderId          String          // Foreign key referencing User (leader)
  eventId           Int             // Foreign key referencing Event
  createdAt         DateTime        @default(now())

  registrations     Registration[]  // Relation to Registration model
  leader            User            @relation(fields: [leaderId], references: [id], onDelete: Cascade)
  event             Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([teamName, eventId])     // Ensures unique team names within an event
}