generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String         @unique
  emailVerified     DateTime?
  image             String?
  collegeName       String?
  collegeRollNumber String?
  phoneNumber       String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  accounts          Account[]
  registrations     Registration[]
  sessions          Session[]
  teams             Team[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Event {
  description   String?
  date          DateTime?
  endTime       DateTime?
  image         String
  maxTeamSize   Int
  minTeamSize   Int
  name          String         @unique
  startTime     DateTime?
  venue         String?
  id            Int            @id @default(autoincrement())
  type          EventType
  eventDetails  EventDetail[]
  registrations Registration[]
  teams         Team[]
}

model EventDetail {
  id      String @id @default(cuid())
  title   String
  content String
  eventId Int
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Registration {
  id        String   @id @default(cuid())
  userId    String
  teamId    String?
  createdAt DateTime @default(now())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  team      Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Team {
  id            String         @id @default(cuid())
  teamName      String
  leaderId      String
  createdAt     DateTime       @default(now())
  eventId       Int
  registrations Registration[]
  event         Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  leader        User           @relation(fields: [leaderId], references: [id], onDelete: Cascade)

  @@unique([teamName, eventId])
}

enum EventType {
  INDIVIDUAL
  TEAM
}
